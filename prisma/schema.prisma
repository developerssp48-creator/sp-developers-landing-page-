generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  phone          String     @unique
  email          String?    @unique
  role           String     @default("USER") // USER | AGENT | ADMIN
  directSignup   Boolean    @default(true)
  executiveCode  String?    // marketing executive referral code, if provided
  referredBy     Agent?     @relation(fields: [referredById], references: [id])
  referredById   String?
  bookings       Booking[]
  referrals      Referral[]
}

model Agent {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  phone          String     @unique
  email          String?    @unique
  code           String     @unique
  users          User[]
  referrals      Referral[]
}

model Plot {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  project        Project   @relation(fields: [projectId], references: [id])
  projectId      String
  projectName    String
  plotNumber     String
  sizeSqYds      Int
  pricePerSqYd   Int
  status         String    @default("AVAILABLE") // AVAILABLE | HOLD | BOOKED | SOLD
  bookings       Booking[]

  @@unique([projectName, plotNumber])
}

model Booking {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  plot           Plot      @relation(fields: [plotId], references: [id])
  plotId         String
  amountToken    Int
  status         String   @default("PENDING") // PENDING | CONFIRMED | CANCELLED
}

model Referral {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  agent          Agent     @relation(fields: [agentId], references: [id])
  agentId        String
  executiveCode  String
  source         String    // e.g., offline, landing, campaign name
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String?
  imageUrl    String?
  location    String?
  plots       Plot[]
}


